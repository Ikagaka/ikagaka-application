{"version":3,"sources":["lib/ikagaka_application.js"],"names":[],"mappings":"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","file":"ikagaka_application.js","sourcesContent":["require('babel-runtime/core-js/promise').default = require('bluebird');\r\n\r\nimport {NamedKernelManager, NamedKernelManagerControllers} from 'named-kernel-manager';\r\nimport 'named-kernel-manager-default-plugins';\r\nconsole.log(NamedKernelManagerControllers);\r\nimport {GhostKernelControllers} from 'ghost-kernel';\r\nimport 'ghost-kernel-default-plugins';\r\nconsole.log(GhostKernelControllers);\r\nimport cuttlebone from 'cuttlebone';\r\nimport NanikaStorage from 'nanika-storage';\r\nimport {TimerEventSource} from 'ukagaka-timer-event-source';\r\n\r\nfunction promisify(fs) {\r\n  fs.mkdirPromise = (dir) => new Promise((resolve, reject) => fs.mkdir(dir, (error) => error ? reject(error) : resolve()));\r\n  fs.statPromise = (item) => new Promise((resolve, reject) => fs.stat(item, (error, stats) => error ? reject(error) : resolve(stats)));\r\n  fs.readFilePromise = (item) => new Promise((resolve, reject) => fs.readFile(item, {encoding: 'utf8'}, (error, data) => error ? reject(error) : resolve(data)));\r\n  fs.writeFilePromise = (item, data) => new Promise((resolve, reject) => fs.writeFile(item, data, (error) => error ? reject(error) : resolve()));\r\n}\r\n\r\nconst ikagakaDir = '/ikagaka';\r\nconst initialGhostUrl = './js.nar';\r\nconst initialBalloonUrl = './origin.nar';\r\nconst jsVersion = 'period1';\r\nconst jsVersionFile = '/js_version';\r\n\r\nexport class IkagakaApplication {\r\n  static async start() {\r\n    // TODO: error\r\n    const idbfs = await new Promise((resolve, reject) => new BrowserFS.FileSystem.IndexedDB((error, idbfs) => error ? reject(error) : resolve(idbfs)));\r\n    BrowserFS.initialize(idbfs);\r\n    const fs = BrowserFS.BFSRequire('fs');\r\n    const path = BrowserFS.BFSRequire('path');\r\n    const buffer = BrowserFS.BFSRequire('buffer');\r\n    promisify(fs);\r\n    try {\r\n      await fs.mkdirPromise(ikagakaDir);\r\n    } catch (error) { } // errorをスルー\r\n\r\n    const nanikaStorage = new NanikaStorage(new NanikaStorage.Backend.FS(ikagakaDir, fs, path, buffer.Buffer));\r\n    const namedManager = new cuttlebone.NamedManager();\r\n    const timerEventSource = new TimerEventSource();\r\n    const namedKernelManager = new NamedKernelManager({\r\n      NamedManager: namedManager,\r\n      NanikaStorage: nanikaStorage,\r\n      TimerEventSource: timerEventSource,\r\n    });\r\n    namedKernelManager.GhostViewClass = cuttlebone;\r\n    const ikagakaApplication = new IkagakaApplication(namedKernelManager);\r\n    IkagakaApplication.current = ikagakaApplication;\r\n\r\n    let baseProfileStat;\r\n    try {\r\n      baseProfileStat = await fs.statPromise(path.dirname(nanikaStorage.base_profile_path()));\r\n    } catch (error) { } // errorをスルー\r\n    if (baseProfileStat && baseProfileStat.isFile()) {\r\n      // TODO\r\n      window.alert(\"互換性の無い変更が加わりました。\\n動作のために古いファイルを削除します。\");\r\n      IkagakaApplication.current.deleteStorage();\r\n    }\r\n    // profile\r\n    const baseProfile = await nanikaStorage.base_profile();\r\n    if (!baseProfile.ghosts) {\r\n      baseProfile.ghosts = ['ikaga'];\r\n      baseProfile.balloonname = 'origin';\r\n      await nanikaStorage.base_profile(baseProfile);\r\n    }\r\n    // デフォゴインストール\r\n    let currentJsVersion;\r\n    try {\r\n      currentJsVersion = await fs.readFilePromise(jsVersionFile);\r\n    } catch (error) { }\r\n    if (jsVersion !== currentJsVersion) {\r\n      console.log(namedKernelManager.installNar);\r\n      await namedKernelManager.installNar(initialGhostUrl);\r\n      console.log(\"install default 4\");\r\n      await namedKernelManager.installNar(initialBalloonUrl);\r\n      console.log(\"install default 5\");\r\n      await fs.writeFilePromise(jsVersionFile, jsVersion);\r\n    }\r\n\r\n    $('#ikagaka_boot').click(() => IkagakaApplication.current.boot());\r\n    $('#ikagaka_close').click(() => IkagakaApplication.current.close());\r\n    $('#ikagaka_delete').click(() => IkagakaApplication.current.deleteStorage());\r\n    $(namedManager.element).appendTo(\"body\");\r\n      console.log(\"install default 6\");\r\n    IkagakaApplication.current.boot();\r\n  }\r\n\r\n  constructor(namedKernelManager) {\r\n    this.namedKernelManager = namedKernelManager;\r\n  }\r\n\r\n  boot() {\r\n    this.namedKernelManager.start();\r\n    $('#ikagaka_boot').attr('disabled', true);\r\n    $('#ikagaka_close').removeAttr('disabled');\r\n  }\r\n\r\n  close() {\r\n    this.namedKernelManager.close();\r\n  }\r\n\r\n  async deleteStorage() {\r\n    const nanikaStorage = this.namedKernelManager.components.NanikaStorage;\r\n    if (window.confirm('本当に削除しますか？')) {\r\n      await nanikaStorage.backend._rmAll(ikagakaDir);\r\n      await nanikaStorage.backend._unlink(jsVersionFile);\r\n      window.onbeforeunload = () => 1;\r\n      location.reload();\r\n    }\r\n  }\r\n\r\n  menu() {\r\n  }\r\n}\r\n\r\nIkagakaApplication.start();\r\n\r\n/*\r\n$ ->\r\n\tif require?\r\n\t\tgui = require('nw.gui')\r\n\t\twin = gui.Window.get()\r\n\t\twin.resizeTo(screen.availWidth, screen.availHeight)\r\n\t\twin.moveTo(0, 0)\r\n\tcon = new Console(\"body\")\r\n\tlog = console.log\r\n\twarn = console.warn\r\n\terror = console.error\r\n\tconsole.log = (args...) =>\r\n\t\tlog.apply console, args\r\n\t\tt = args.join('')\r\n\t\tunless /SHIORI\\/\\d\\.\\d|^\\[object Object\\]$/.test t\r\n\t\t\tcon.log t\r\n\tconsole.warn = (args...) =>\r\n\t\twarn.apply console, args\r\n\t\tcon.warn args.join ''\r\n\tconsole.error = (args...) =>\r\n\t\terror.apply console, args\r\n\t\tcon.error args.join ''\r\n\r\n\tfs_root = 'ikagaka'\r\n\tballoon_nar = './vendor/nar/origin.nar'\r\n\tghost_nar = './vendor/nar/ikaga.nar'\r\n\tghost_nar2 = './vendor/nar/touhoku-zunko_or__.nar'\r\n\r\n\tnanikamanager = null\r\n\tboot_nanikamanager = ->\r\n\t\t# メニュー項目取得\r\n\t\tif nanikamanager then return\r\n\t\tnanikamanager = new NanikaManager(storage, namedmanager, append_path: './vendor/js/', logging: true)\r\n\t\t$('#ikagaka_boot').attr('disabled', true)\r\n\t\t$('#ikagaka_halt').removeAttr('disabled')\r\n\t\tcontextmenu = initialize: (nanika) ->\r\n\t\t\tupdate_ghostnames(nanika)\r\n\t\t\tupdate_shellnames(nanika)\r\n\t\t\tupdate_balloonnames(nanika)\r\n\t\t\tnanika.on 'named.initialized', ->\r\n\t\t\t\tconsole.log \"named.initialized\", nanika\r\n\t\t\t\treturn unless nanika.namedid?\r\n\t\t\t\tnamed = namedmanager.named(nanika.namedid)\r\n\t\t\t\tnamed.contextmenu (ev)->\r\n\t\t\t\t\t{scopeId} = ev\r\n\t\t\t\t\titems:\r\n\t\t\t\t\t\tchangeGhost:\r\n\t\t\t\t\t\t\tname: \"ゴースト切り替え\"\r\n\t\t\t\t\t\t\titems: ghostnames.reduce(((o, [name, dst_dirpath])->\r\n\t\t\t\t\t\t\t\to[\"changeGhost>\"+dst_dirpath] = if nanikamanager.is_existing_ghost(dst_dirpath) && nanika.ghostpath != dst_dirpath\r\n\t\t\t\t\t\t\t\tthen name: name+\"に変更\", disabled: true\r\n\t\t\t\t\t\t\t\telse name: name+\"に変更\", callback: ->\r\n\t\t\t\t\t\t\t\t\tconsole.log(\"change Ghost>\", name, dst_dirpath)\r\n\t\t\t\t\t\t\t\t\tnanikamanager.change(nanika.ghostpath, dst_dirpath)\r\n\t\t\t\t\t\t\t\treturn o\r\n\t\t\t\t\t\t\t), {})\r\n\t\t\t\t\t\tcallGhost:\r\n\t\t\t\t\t\t\tname: \"他のゴーストを呼ぶ\"\r\n\t\t\t\t\t\t\titems: ghostnames.reduce(((o, [name, dst_dirpath])->\r\n\t\t\t\t\t\t\t\to[\"callGhost>\"+dst_dirpath] = if nanikamanager.is_existing_ghost(dst_dirpath)\r\n\t\t\t\t\t\t\t\tthen name: name+\"を呼ぶ\", disabled: true\r\n\t\t\t\t\t\t\t\telse name: name+\"を呼ぶ\", callback: ->\r\n\t\t\t\t\t\t\t\t\tconsole.log(\"call Ghost>\", name, dst_dirpath)\r\n\t\t\t\t\t\t\t\t\tnanikamanager.call(nanika.ghostpath, dst_dirpath)\r\n\t\t\t\t\t\t\t\treturn o\r\n\t\t\t\t\t\t\t), {})\r\n\t\t\t\t\t\tchangeShell:\r\n\t\t\t\t\t\t\tname: \"シェル\"\r\n\t\t\t\t\t\t\titems: shellnames.reduce(((o, [name, dst_dirpath])->\r\n\t\t\t\t\t\t\t\to[\"changeShell>\"+dst_dirpath] = if named.shell.descript.name == name\r\n\t\t\t\t\t\t\t\tthen name: name+\"に変更\", disabled: true\r\n\t\t\t\t\t\t\t\telse name: name+\"に変更\", callback: ->\r\n\t\t\t\t\t\t\t\t\tconsole.log(\"change Shell>\", name, dst_dirpath)\r\n\t\t\t\t\t\t\t\t\tscope_surfaces = {}\r\n\t\t\t\t\t\t\t\t\tObject.keys(named.scopes).forEach (scopeId)->\r\n\t\t\t\t\t\t\t\t\t\tscope_surfaces[scopeId] = named.scopes[scopeId].currentSurface.surfaceId\r\n\t\t\t\t\t\t\t\t\tnanika.change_named(dst_dirpath, nanika.profile.balloonpath).then ->\r\n\t\t\t\t\t\t\t\t\t\tObject.keys(scope_surfaces).forEach (scopeId)->\r\n\t\t\t\t\t\t\t\t\t\t\tnamed.scope(scopeId).surface(scope_surfaces[scopeId])\r\n\t\t\t\t\t\t\t\treturn o\r\n\t\t\t\t\t\t\t), {})\r\n\t\t\t\t\t\tchangeBalloon:\r\n\t\t\t\t\t\t\tname: \"バルーン\"\r\n\t\t\t\t\t\t\titems: balloonnames.reduce(((o, [name, dst_dirpath])->\r\n\t\t\t\t\t\t\t\to[\"changeBalloon>\"+dst_dirpath] = if named.balloon.descript.name == name\r\n\t\t\t\t\t\t\t\tthen name: name+\"に変更\", disabled: true\r\n\t\t\t\t\t\t\t\telse name: name+\"に変更\", callback: ->\r\n\t\t\t\t\t\t\t\t\tconsole.log(\"change Balloon>\", name, dst_dirpath)\r\n\t\t\t\t\t\t\t\t\tscope_surfaces = {}\r\n\t\t\t\t\t\t\t\t\tObject.keys(named.scopes).forEach (scopeId)->\r\n\t\t\t\t\t\t\t\t\t\tscope_surfaces[scopeId] = named.scopes[scopeId].currentSurface.surfaceId\r\n\t\t\t\t\t\t\t\t\tnanika.change_named(nanika.profile.shellpath, dst_dirpath).then ->\r\n\t\t\t\t\t\t\t\t\t\tObject.keys(scope_surfaces).forEach (scopeId)->\r\n\t\t\t\t\t\t\t\t\t\t\tnamed.scope(scopeId).surface(scope_surfaces[scopeId])\r\n\t\t\t\t\t\t\t\treturn o\r\n\t\t\t\t\t\t\t), {})\r\n\t\t\t\t\t\tinstall: name: \"インストール\", callback: ->\r\n\t\t\t\t\t\t\t$('#install_field').remove()\r\n\t\t\t\t\t\t\tinstall_field = $('<input type=\"file\" />').attr('id', 'install_field').css(display: 'none')\r\n\t\t\t\t\t\t\t.change (ev) =>\r\n\t\t\t\t\t\t\t\tfor file in ev.target.files\r\n\t\t\t\t\t\t\t\t\tinstall_nar file, nanika.ghostpath, nanika.ghost.descript['sakura.name']\r\n\t\t\t\t\t\t\t\t\t.then ->\r\n\t\t\t\t\t\t\t\t\t\tupdate_ghostnames(nanika)\r\n\t\t\t\t\t\t\t\t\t\tupdate_shellnames(nanika)\r\n\t\t\t\t\t\t\t\t\t\tupdate_balloonnames(nanika)\r\n\t\t\t\t\t\t\t\t$('#install_field').remove()\r\n\t\t\t\t\t\t\t$('body').append install_field\r\n\t\t\t\t\t\t\tinstall_field.click()\r\n\t\t\t\t\t\tinputScript: name: '開発用 スクリプト入力', callback: -> nanika.ssp.play window.prompt('send')\r\n\t\t\t\t\t\tclearAll:    name: '全消去', callback: -> delete_storage()\r\n\t\t\t\t\t\tquit:        name: '終了', callback: -> nanikamanager.close(nanika.ghostpath, 'user')\r\n\t\t\t\t\t\tquitAll:     name: '全て終了', callback: -> nanikamanager.closeall('user')\r\n\t\tinstall = initialize: (nanika) ->\r\n\t\t\tnanika.on 'named.initialized', ->\r\n\t\t\t\tunless nanika.namedid?\r\n\t\t\t\t\treturn\r\n\t\t\t\tnamed = namedmanager.named(nanika.namedid)\r\n\t\t\t\tnamed.on 'filedrop', (ev) =>\r\n\t\t\t\t\tev.event.stopPropagation()\r\n\t\t\t\t\tev.event.preventDefault()\r\n\t\t\t\t\tev.event.originalEvent.dataTransfer.dropEffect = 'copy'\r\n\t\t\t\t\tfor file in ev.event.originalEvent.dataTransfer.files\r\n\t\t\t\t\t\tinstall_nar file, nanika.ghostpath, nanika.ghost.descript['sakura.name']\r\n\t\t\t\t\t\t.then ->\r\n\t\t\t\t\t\t\tupdate_ghostnames(nanika)\r\n\t\t\t\t\t\t\tupdate_shellnames(nanika)\r\n\t\t\t\t\t\t\tupdate_balloonnames(nanika)\r\n\r\n\t\tnotice_events = initialize: (nanika) ->\r\n\t\t\tname = nanika.ghost.descript.name\r\n\t\t\tnanika.on 'named.initialized', -> console.log 'materialized '+name\r\n\t\t\tnanika.on 'halted', -> console.log 'halted '+name\r\n\t\tNanikaPlugin.contextmenu = contextmenu\r\n\t\tNanikaPlugin.install = install\r\n\t\tNanikaPlugin.notice_events = notice_events\r\n\t\tnanikamanager.on 'destroyed', ->\r\n\t\t\tnanikamanager = null\r\n\t\t\t$('#ikagaka_boot').removeAttr('disabled')\r\n\t\t\t$('#ikagaka_halt').attr('disabled', true)\r\n\t\t\twindow.onbeforeunload = ->\r\n\t\t\tif require?\r\n\t\t\t\twindow.close()\r\n\t\tconsole.log 'baseware booting'\r\n\t\twindow.onbeforeunload = (event) -> event.returnValue = 'ベースウェアを終了していません。\\n状態が保存されませんが本当にページを閉じますか？'\r\n\t\tnanikamanager.initialize()\r\n\t\t.then ->\r\n\t\t\tnanikamanager.bootall()\r\n\r\n#\tmfs = new BrowserFS.FileSystem.InMemory()\r\n#\tcb(null, mfs)\r\n# メニュー表示用の項目リスト\r\n\tghostnames = []\r\n\tupdate_ghostnames = (nanika)->\r\n\t\tstorage.ghosts().then (ghosts) ->\r\n\t\t\tPromise.all ghosts.map (dst_dirpath) -> storage.ghost_name(dst_dirpath).then (name) -> [name, dst_dirpath]\r\n\t\t\t.then (_ghostnames)-> ghostnames = _ghostnames\r\n\tshellnames = []\r\n\tupdate_shellnames = (nanika)->\r\n\t\tstorage.shells(nanika.ghostpath).then (shells) ->\r\n\t\t\tPromise.all shells.map (dst_dirpath) -> storage.shell_name(nanika.ghostpath, dst_dirpath).then (name) -> [name, dst_dirpath]\r\n\t\t\t.then (_shellnames)-> shellnames = _shellnames\r\n\tballoonnames = []\r\n\tupdate_balloonnames = (nanika)->\r\n\t\tstorage.balloons().then (balloons) ->\r\n\t\t\tPromise.all balloons.map (dst_dirpath) -> storage.balloon_name(dst_dirpath).then (name) -> [name, dst_dirpath]\r\n\t\t\t.then (_balloonnames)-> balloonnames = _balloonnames\r\n      */\r\n"]}